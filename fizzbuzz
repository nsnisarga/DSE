import random
import numpy as np
from typing import List
import tqdm
import math

def squared_distance(prediction, target):
    return np.sum((np.array(prediction) - np.array(target))**2)

def fizzbuzzencode(x) -> List[int]:
    if x % 15 == 0:
        return [0, 0, 0, 1]
    elif x % 5 == 0:
        return [0, 0, 1, 0]
    elif x % 3 == 0:
        return [0, 1, 0, 0]
    else:
        return [1, 0, 0, 0]

def feed_forward(network, input_vector):
    outputs = []
    for layer in network:
        input_with_bias = input_vector + [1]
        output = [neuron_output(neuron, input_with_bias) for neuron in layer]
        outputs.append(output)
        input_vector = output
    return outputs

def sigmoid(t):
    return 1 / (1 + math.exp(-t))

def neuron_output(weights, inputs):
    return sigmoid(np.dot(weights, inputs))

def binaryencode(x: int) -> List[int]:
    binary = []
    for i in range(10):
        binary.append(x % 2)
        x = x // 2
    return binary

def sqerror_gradients(network, x, y):
    hidden_outputs = feed_forward(network[:-1], x)[0]
    output_predictions = feed_forward(network, x)[-1]
    output_gradients = [(2 * output_predictions[i] - y[i]) * output_predictions[i] * (1 - output_predictions[i]) for i in range(len(y))]
    hidden_gradients = [hidden_outputs[j] * (1 - hidden_outputs[j]) * np.dot([network[-1][i][j] * output_gradients[i] for i in range(len(output_gradients))], output_gradients) for j in range(len(hidden_outputs))]
    return [hidden_gradients, output_gradients]

def gradient_step(neuron, grad, learning_rate):
    if isinstance(grad, np.ndarray):
        grad = grad.item()
    return [weight - learning_rate * grad for weight in neuron]

xs = [binaryencode(n) for n in range(101, 1024)]
ys = [fizzbuzzencode(n) for n in range(101, 1024)]
HIDDEN = 25
network = [
    [[random.random() for _ in range(11)] for _ in range(HIDDEN)],
    [[random.random() for _ in range(HIDDEN + 1)] for _ in range(4)]
]
learning_rate = 0.01

with tqdm.trange(500) as t:
    for epoch in t:
        epoch_loss = 0.0
        for x, y in zip(xs, ys):
            predicted = feed_forward(network, x)[-1]
            epoch_loss += squared_distance(np.array(predicted), np.array(y))
            gradients = sqerror_gradients(network, x, y)
            network = [
                [
                    gradient_step(neuron, grad, -learning_rate)
                    for neuron, grad in zip(layer, layer_grad)
                ]
                for layer, layer_grad in zip(network, gradients)
            ]
        t.set_description(f"fizz buzz (loss: {epoch_loss:.2f})")

def argmax(xs: List) -> int:
    return max(range(len(xs)), key=lambda i: xs[i])

num_correct = 0
for n in range(1, 101):
    x = binaryencode(n)
    predicted = argmax(feed_forward(network, x)[-1])
    actual = argmax(fizzbuzzencode(n))
    labels = [str(n), "fizz", "buzz", "fizzbuzz"]
    print(n, labels[predicted], labels[actual])
    if predicted == actual:
        num_correct += 1

print(num_correct, "/", 100)




OUTPUT:
1 fizzbuzz 1
2 fizzbuzz 2
3 fizzbuzz fizz
4 fizzbuzz 4
5 fizzbuzz buzz
6 fizzbuzz fizz
7 fizzbuzz 7
8 fizzbuzz 8
9 fizzbuzz fizz
10 fizzbuzz buzz
11 fizzbuzz 11
12 fizzbuzz fizz
13 fizzbuzz 13
14 fizzbuzz 14
15 fizzbuzz fizzbuzz
16 fizzbuzz 16
17 fizzbuzz 17
18 fizzbuzz fizz
19 fizzbuzz 19
20 fizzbuzz buzz
21 fizzbuzz fizz
22 fizzbuzz 22
23 fizzbuzz 23
24 fizzbuzz fizz
25 fizzbuzz buzz
26 fizzbuzz 26
27 fizzbuzz fizz
28 fizzbuzz 28
29 fizzbuzz 29
30 fizzbuzz fizzbuzz
31 fizzbuzz 31
32 fizzbuzz 32
33 fizzbuzz fizz
34 fizzbuzz 34
35 fizzbuzz buzz
36 fizzbuzz fizz
37 fizzbuzz 37
38 fizzbuzz 38
39 fizzbuzz fizz
40 fizzbuzz buzz
41 fizzbuzz 41
42 fizzbuzz fizz
43 fizzbuzz 43
44 fizzbuzz 44
45 fizzbuzz fizzbuzz
46 fizzbuzz 46
47 fizzbuzz 47
48 fizzbuzz fizz
49 fizzbuzz 49
50 fizzbuzz buzz
51 fizzbuzz fizz
52 fizzbuzz 52
53 fizzbuzz 53
54 fizzbuzz fizz
55 fizzbuzz buzz
56 fizzbuzz 56
57 fizzbuzz fizz
58 fizzbuzz 58
59 fizzbuzz 59
60 fizzbuzz fizzbuzz
61 fizzbuzz 61
62 fizzbuzz 62
63 fizzbuzz fizz
64 fizzbuzz 64
65 fizzbuzz buzz
66 fizzbuzz fizz
67 fizzbuzz 67
68 fizzbuzz 68
69 fizzbuzz fizz
70 fizzbuzz buzz
71 fizzbuzz 71
72 fizzbuzz fizz
73 fizzbuzz 73
74 fizzbuzz 74
75 fizzbuzz fizzbuzz
76 fizzbuzz 76
77 fizzbuzz 77
78 fizzbuzz fizz
79 fizzbuzz 79
80 fizzbuzz buzz
81 fizzbuzz fizz
82 fizzbuzz 82
83 fizzbuzz 83
84 fizzbuzz fizz
85 fizzbuzz buzz
86 fizzbuzz 86
87 fizzbuzz fizz
88 fizzbuzz 88
89 fizzbuzz 89
90 fizzbuzz fizzbuzz
91 fizzbuzz 91
92 fizzbuzz 92
93 fizzbuzz fizz
94 fizzbuzz 94
95 fizzbuzz buzz
96 fizzbuzz fizz
97 fizzbuzz 97
98 fizzbuzz 98
99 fizzbuzz fizz
100 fizzbuzz buzz
6 / 100
